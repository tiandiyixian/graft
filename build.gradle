plugins {
    id 'java'
}

group 'za.ac.sun.cs'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    // annotation processors
    annotationProcessor 'org.apache.tinkerpop:gremlin-core:3.4.2'
    annotationProcessor 'org.neo4j:neo4j-tinkerpop-api-impl:0.7-3.2.3'
    testAnnotationProcessor 'org.apache.tinkerpop:gremlin-core:3.4.2'
    testAnnotationProcessor 'org.neo4j:neo4j-tinkerpop-api-impl:0.7-3.2.3'

    // Soot
    implementation 'ca.mcgill.sable:soot:3.3.0'

    // graph db drivers
    implementation 'org.apache.tinkerpop:gremlin-core:3.4.2'
    implementation 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.2'
    implementation 'org.apache.tinkerpop:neo4j-gremlin:3.4.2'
    implementation 'io.shiftleft:tinkergraph-gremlin:3.3.4.18'
    implementation 'org.neo4j:neo4j-tinkerpop-api-impl:0.7-3.2.3'

    // logging
    implementation 'org.slf4j:slf4j-api:1.6.6'
    implementation 'ch.qos.logback:logback-classic:1.0.13'

    // configuration
    implementation 'org.apache.commons:commons-configuration2:2.4'
    implementation 'commons-beanutils:commons-beanutils:1.9.3'

    testImplementation 'junit:junit:4.12'
}

//task fatJar(type: Jar) {
//    manifest {
//        attributes 'Implementation-Version': version, 'Main-Class': 'graft.Graft'
//    }
//    baseName = project.name + '-all'
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}
//
//task uberJar(type: Jar) {
//    from sourceSets.main.output
//    dependsOn configurations.runtimeClasspath
//    from {
//        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//    }
//}

// add script generation to build task
// from https://stackoverflow.com/a/20106665
build {

    doLast {
        mkdir 'bin'

        // interactive shell script
        File shellScript = file('bin/graft-shell')
        shellScript.withPrintWriter {
            it.println '#!/bin/sh'
            it.println "groovysh -cp ${getRuntimeClasspath()}"
        }

        // regular start script
        File startScript = file('bin/graft')
        startScript.withPrintWriter {
            it.println '#!/bin/sh'
            it.println "java -cp ${getRuntimeClasspath()} graft.Graft \"\$@\""
        }

        // make scripts executable
        ant.chmod(file: shellScript.absolutePath, perm: 'u+x')
        ant.chmod(file: startScript.absolutePath, perm: 'u+x')
    }

}

String getRuntimeClasspath() {
    sourceSets.main.runtimeClasspath.collect { it.absolutePath }.join(':')
}